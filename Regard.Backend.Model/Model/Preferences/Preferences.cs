/* THIS FILE IS AUTOGENERATED DO NOT EDIT
 *
 * This file is autogenerated from Preferences.csv. 
 * If you want to add a new user interface coordinate 
 * do so in the CSV file then rebuild.
 */
using Regard.Model;

namespace Regard.Backend.Services
{
    public static class Preferences
    {
        /// <summary>
        /// Indicates if the first time setup was performed.
        /// </summary>
        public static readonly PreferenceDefinition<bool> Server_Initialized = new PreferenceDefinition<bool>(
            false,
            "server.initialized",
            null,
            null,
            0
        );

        /// <summary>
        /// Allow user registrations from the frontend.
        /// </summary>
        public static readonly PreferenceDefinition<bool> Server_AllowRegistrations = new PreferenceDefinition<bool>(
            true,
            "server.allow_registrations",
            "AllowRegistrations",
            "REGARD_ALLOW_REGISTRATIONS",
            0
        );

        /// <summary>
        /// Send debugging information to the frontend
        /// </summary>
        public static readonly PreferenceDefinition<bool> Server_Debug = new PreferenceDefinition<bool>(
            false,
            "server.debug",
            "Debug",
            "REGARD_DEBUG",
            0
        );

        /// <summary>
        /// If enabled, videos will be downloaded automatically
        /// </summary>
        public static readonly PreferenceDefinition<bool> Subscriptions_AutoDownload = new PreferenceDefinition<bool>(
            true,
            "subscriptions.auto_download",
            "Subscriptions:AutoDownload",
            null,
            PreferenceFlags.User | PreferenceFlags.SubscriptionFolder | PreferenceFlags.Subscription
        );

        /// <summary>
        /// Order in which to download videos
        /// </summary>
        public static readonly PreferenceDefinition<VideoOrder> Subscriptions_DownloadOrder = new PreferenceDefinition<VideoOrder>(
            VideoOrder.Newest,
            "subscriptions.download_order",
            "Subscriptions:DownloadOrder",
            null,
            PreferenceFlags.User | PreferenceFlags.SubscriptionFolder | PreferenceFlags.Subscription
        );

        /// <summary>
        /// Maximum number of downloaded videos to keep per subscription (-1 = no limit). This limit only applies to the automatic downloader, but the user can manually download more videos.
        /// </summary>
        public static readonly PreferenceDefinition<int> Subscriptions_MaxCount = new PreferenceDefinition<int>(
            3,
            "subscriptions.max_count",
            "Subscriptions:MaxCount",
            null,
            PreferenceFlags.User | PreferenceFlags.SubscriptionFolder | PreferenceFlags.Subscription
        );

        /// <summary>
        /// Maximum size a subscription can take on disk in MB (-1 = no limit). This limit only applies to the automatic downloader, but the user can manually download more videos.
        /// </summary>
        public static readonly PreferenceDefinition<int> Subscriptions_MaxSize = new PreferenceDefinition<int>(
            -1,
            "subscriptions.max_size",
            "Subscriptions:MaxSize",
            null,
            PreferenceFlags.User | PreferenceFlags.SubscriptionFolder | PreferenceFlags.Subscription
        );

        /// <summary>
        /// When videos are marked as watched, they are deleted automatically from disk.
        /// </summary>
        public static readonly PreferenceDefinition<bool> Subscriptions_AutoDeleteWatched = new PreferenceDefinition<bool>(
            true,
            "subscriptions.auto_delete_watched",
            "Subscriptions:AutoDeleteWatched",
            null,
            PreferenceFlags.User | PreferenceFlags.SubscriptionFolder | PreferenceFlags.Subscription
        );

        /// <summary>
        /// Pattern indicating where files are downloaded automatically.
        /// </summary>
        public static readonly PreferenceDefinition<string> Subscriptions_DownloadPath = new PreferenceDefinition<string>(
            "${DownloadDirectory}/${SubscriptionFolderPath}/${SubscriptionName}/${VideoPlaylistIndex}-${VideoName}",
            "subscriptions.download_path",
            "Subscriptions:DownloadPath",
            null,
            PreferenceFlags.User | PreferenceFlags.SubscriptionFolder | PreferenceFlags.Subscription
        );

        /// <summary>
        /// Maximum number of downloaded videos to keep per user (-1 = no limit). This setting only applies to the automatic downloader, the user can download more videos than this limit. Use the User_CountQuota option for a hard limit.
        /// </summary>
        public static readonly PreferenceDefinition<int> User_MaxCount = new PreferenceDefinition<int>(
            10,
            "user.max_count",
            "User:MaxCount",
            null,
            PreferenceFlags.User
        );

        /// <summary>
        /// Maximum size a user's downloaded videos can take in MB (-1 = no limit). This setting only applies to the automatic downloader, the user can download more videos than this limit. Use the User_SizeQuota option for a hard limit.
        /// </summary>
        public static readonly PreferenceDefinition<int> User_MaxSize = new PreferenceDefinition<int>(
            -1,
            "user.max_size",
            "User:MaxSize",
            null,
            PreferenceFlags.User
        );

        /// <summary>
        /// Hard limit on numbers of downloaded videos a user can keep (-1 = no limit). Also applies to manual downloads.
        /// </summary>
        public static readonly PreferenceDefinition<int> User_CountQuota = new PreferenceDefinition<int>(
            -1,
            "user.count_quota",
            "User:CountQuota",
            null,
            PreferenceFlags.User
        );

        /// <summary>
        /// Hard limit on total size of downloaded videos a user can keep in MB (-1 = no limit). Also applies to manual downloads.
        /// </summary>
        public static readonly PreferenceDefinition<int> User_SizeQuota = new PreferenceDefinition<int>(
            -1,
            "user.size_quota",
            "User:SizeQuota",
            null,
            PreferenceFlags.User
        );

    }
}